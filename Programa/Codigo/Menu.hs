-- Codigo/Menu.hs
module Menu (menuPrincipal) where

import System.IO (hFlush, stdout)
import qualified Importacion as Imp
import qualified ProcesamientoDeDatos as Procesamiento
import qualified AnalisisDatos as AD
import qualified Estadisticas as Estadisticas


import qualified Datos as D 
import System.Process (callCommand)   
----se llama para limpiar consola.
limpiarPantalla :: IO ()
limpiarPantalla = callCommand "clear"


estadoInicial :: D.EstadoApp
estadoInicial = D.EstadoApp { D.ventas = [], D.errores = [] }

-- | Men칰 principal del sistema
menuPrincipal :: IO ()
menuPrincipal = ciclo estadoInicial
  where
    ciclo :: D.EstadoApp -> IO ()
    ciclo estado = do
      limpiarPantalla
      -- 游댳 Mostrar resumen actual
      putStrLn $ "Datos cargados: " ++ show (length (D.ventas estado)) ++
                " | Registros con error: " ++ show (length (D.errores estado))
      putStrLn ""
      -- 游댳 Men칰 principal
      putStrLn "=================================================="
      putStrLn "     SISTEMA DE AN츼LISIS DE DATOS DE VENTAS       "
      putStrLn "=================================================="
      putStrLn "1) Importaci칩n de datos"
      putStrLn "2) Procesamiento de datos"
      putStrLn "3) An치lisis de datos"
      putStrLn "4) An치lisis temporal"
      putStrLn "5) B칰squeda espec칤fica"
      putStrLn "6) Estad칤sticas"
      putStrLn "7) Salir"
      putStrLn "--------------------------------------------------"
      putStr   "Seleccione una opci칩n: "
      hFlush stdout
      opcion <- getLine
      putStrLn ""
      case opcion of
        "1" -> Imp.menuImportacion estado >>= ciclo
        "2" -> Procesamiento.menuProcesamiento estado >>= ciclo
        "3" -> AD.menuAnalisisDatos estado >>= ciclo
        "4" -> Estadisticas.menuEstadisticas estado >>= ciclo
        "5" -> mensajePendiente "B칰squeda espec칤fica"    >> ciclo estado
        "6" -> mensajePendiente "Estad칤sticas"           >> ciclo estado
        "7" -> putStrLn "Saliendo del sistema... 춰Gracias por usar el programa!"
        _   -> putStrLn "Opci칩n no v치lida. Intente nuevamente." >> ciclo estado

     
-- | Mensaje temporal para opciones a칰n no implementadas
mensajePendiente :: String -> IO ()
mensajePendiente nombre = do
  putStrLn (">>> Opci칩n '" ++ nombre ++ "' a칰n no implementada.")
  putStrLn "Presione ENTER para volver al men칰..."
  _ <- getLine
  putStrLn ""
