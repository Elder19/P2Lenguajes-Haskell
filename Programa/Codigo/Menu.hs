-- Codigo/Menu.hs
module Menu (menuPrincipal) where

import System.IO (hFlush, stdout)
import qualified Importacion as Imp
import qualified ProcesamientoDeDatos as Procesamiento
import qualified AnalisisDatos as AD
import qualified Estadisticas as Estadisticas
import qualified Datos as D
import System.Process (callCommand)

-- 游댳 Limpia la consola
limpiarPantalla :: IO ()
limpiarPantalla = callCommand "clear"

-- 游댳 Pausa gen칠rica
pause :: IO ()
pause = do
  putStrLn "Presione ENTER para continuar..."
  _ <- getLine
  putStrLn ""
  putStrLn ""

-- 游댳 Estado inicial vac칤o
estadoInicial :: D.EstadoApp
estadoInicial = D.EstadoApp { D.ventas = [], D.errores = [] }

-- 游댳 Helper: exige ventas cargadas para continuar
conVentas :: D.EstadoApp -> IO D.EstadoApp -> IO D.EstadoApp
conVentas est accion =
  if null (D.ventas est)
    then do
      putStrLn ">>> No hay ventas cargadas. Primero importe datos (Men칰 principal -> opci칩n 1)."
      pause
      return est
    else accion

-- | Men칰 principal del sistema
menuPrincipal :: IO ()
menuPrincipal = ciclo estadoInicial
  where
    ciclo :: D.EstadoApp -> IO ()
    ciclo estado = do
      limpiarPantalla
      -- 游댲 Resumen actual
      putStrLn $ "Datos cargados: " ++ show (length (D.ventas estado)) ++
                 " | Registros con error: " ++ show (length (D.errores estado))
      putStrLn ""
      -- 游댲 Men칰 principal
      putStrLn "=================================================="
      putStrLn "     SISTEMA DE AN츼LISIS DE DATOS DE VENTAS       "
      putStrLn "=================================================="
      putStrLn "1) Importaci칩n de datos"
      putStrLn "2) Procesamiento de datos"
      putStrLn "3) An치lisis de datos"
      putStrLn "4) An치lisis temporal"
      putStrLn "5) B칰squeda espec칤fica"
      putStrLn "6) Estad칤sticas"
      putStrLn "7) Salir"
      putStrLn "--------------------------------------------------"
      putStr   "Seleccione una opci칩n: "
      hFlush stdout
      opcion <- getLine
      putStrLn ""

      case opcion of
      
        "1" -> do
          est' <- Imp.menuImportacion estado
          ciclo est'

      
        "2" -> conVentas estado (Procesamiento.menuProcesamiento estado) >>= ciclo

     
        "3" -> conVentas estado (AD.menuAnalisisDatos estado) >>= ciclo

        
        "4" -> conVentas estado (mensajePendiente "An치lisis temporal" >> return estado) >>= ciclo

       
        "5" -> conVentas estado (mensajePendiente "B칰squeda espec칤fica" >> return estado) >>= ciclo

        "6" -> conVentas estado (Estadisticas.menuEstadisticas estado) >>= ciclo

     
        "7" -> putStrLn "Saliendo del sistema... 춰Gracias por usar el programa!"

      
        _   -> do
          putStrLn "Opci칩n no v치lida. Intente nuevamente."
          pause
          ciclo estado

-- | Mensaje temporal para opciones a칰n no implementadas
mensajePendiente :: String -> IO ()
mensajePendiente nombre = do
  putStrLn (">>> Opci칩n '" ++ nombre ++ "' a칰n no implementada.")
  pause
